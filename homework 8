class CurrencyConverter:
    def __init__(self):
        self.rates = {}

    def get_rates(self):
    
        try:
            response = requests.get("https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json")
            response.raise_for_status()  
            data = response.json()

            for item in data:
                self.rates[item['cc']] = item['rate']
        except requests.RequestException as e:
            print(f"Error fetching currency rates: {e}")
            self.rates = {}

    def convert(self, amount, from_currency, to_currency):
  
        if from_currency != "USD":
            amount = amount / self.rates[from_currency]

        amount = round(amount * self.rates[to_currency], 2)
        return amount

    def get_available_currencies(self):
        
        return list(self.rates.keys())

converter = CurrencyConverter()

converter.get_rates()

while True:
    try:
      
        available_currencies = converter.get_available_currencies()
        print(f"Available currencies: {', '.join(available_currencies)}")

        amount = float(input("Enter the amount of currency: "))
        from_currency = input("Enter the currency code of the amount you entered: ").upper()


        if from_currency not in available_currencies:
            print(f"Invalid currency code {from_currency}. Please try again.")
            continue

        to_currency = input("Enter the currency code to convert to (e.g., USD): ").upper()


        if to_currency not in available_currencies:
            print(f"Invalid currency code {to_currency}. Please try again.")
            continue
        converted_amount = converter.convert(amount, from_currency, to_currency)
        print(f"The amount of {amount} {from_currency} is equal to {converted_amount} {to_currency}")

        break

    except ValueError:
        print("Invalid amount entered. Please try again.")
    except KeyError as e:
        print(f"Currency code error: {e}. Please try again.")
